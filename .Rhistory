Category = str_replace_all(Category, "_", " ") %>% str_to_title()
) %>%
mutate(Category = gsub(" Mentioned Feed", "", Category),
Category = ifelse(Category=="No Afi", "No Area for Improvement"),
Category = ifelse(Category=="Assessment Feedback", "Assessment and Feedback"),
Category = factor(Category, levels = c("Other", "Differentiation", "Student Comprehension", "Assessment and Feedback", "Student Engagement", "Communication", "Lesson Planning", "Classroom Management", "No Area for Improvement")))
plot_data_combined <- bind_rows(
pivot_longer(overall_means,
cols = everything(),
names_to = "Category",
values_to = "Mean") %>%
mutate(Type = "All Feedback"),
pivot_longer(pst_means,
cols = everything(),
names_to = "Category",
values_to = "Mean") %>%
mutate(Type = "PSTs")
) %>%
mutate(
Category = str_remove(Category, "^(overall_|pst_)"),
Category = str_replace_all(Category, "_", " ") %>% str_to_title()
) %>%
mutate(Category = gsub(" Mentioned Feed", "", Category),
Category = ifelse(Category=="No Afi", "No Area for Improvement", Category),
Category = ifelse(Category=="Assessment Feedback", "Assessment and Feedback", Category),
Category = factor(Category, levels = c("Other", "Differentiation", "Student Comprehension", "Assessment and Feedback", "Student Engagement", "Communication", "Lesson Planning", "Classroom Management", "No Area for Improvement")))
plot_data_combined
ggplot(plot_data_combined, aes(x = reorder(Category, Mean), y = Mean, fill = Type)) +
geom_col(position = "dodge", width = 0.7) +
coord_flip() +
labs(x = NULL, y = "% of Reflections or PSTs", fill = NULL) +
theme_minimal(base_size = 14) +
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05), labels = scales::percent_format()) +
scale_fill_manual(values = c("All Reflections" = "#FF8C42", "PSTs" = "#1F4E79")) +
theme(
text = element_text(family = "LMRoman", color = "black", size = 16),
plot.caption = element_text(hjust = 0),
axis.text = element_text(color = "black", size = 16),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom"
)
ggplot(plot_data_combined, aes(x = reorder(Category, Mean), y = Mean, fill = Type)) +
geom_col(position = "dodge", width = 0.7) +
coord_flip() +
labs(x = NULL, y = "% of Feedback or PSTs", fill = NULL) +
theme_minimal(base_size = 14) +
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05), labels = scales::percent_format()) +
scale_fill_manual(values = c("All Feedback" = "#FF8C42", "PSTs" = "#1F4E79")) +
theme(
text = element_text(family = "LMRoman", color = "black", size = 16),
plot.caption = element_text(hjust = 0),
axis.text = element_text(color = "black", size = 16),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom"
)
ggplot(plot_data_combined, aes(x = reorder(Category, Mean), y = Mean, fill = Type)) +
geom_col(position = "dodge", width = 0.7) +
coord_flip() +
labs(x = NULL, y = "% of Feedback or PSTs", fill = NULL) +
theme_minimal(base_size = 14) +
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05), labels = scales::percent_format()) +
scale_fill_manual(values = c("Feedback-Level" = "#FF8C42", "PST-Level" = "#1F4E79")) +
theme(
text = element_text(family = "LMRoman", color = "black", size = 16),
plot.caption = element_text(hjust = 0),
axis.text = element_text(color = "black", size = 16),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom"
)
plot_data_combined <- bind_rows(
pivot_longer(overall_means,
cols = everything(),
names_to = "Category",
values_to = "Mean") %>%
mutate(Type = "Feedback-Level"),
pivot_longer(pst_means,
cols = everything(),
names_to = "Category",
values_to = "Mean") %>%
mutate(Type = "PST-Level")
) %>%
mutate(
Category = str_remove(Category, "^(overall_|pst_)"),
Category = str_replace_all(Category, "_", " ") %>% str_to_title()
) %>%
mutate(Category = gsub(" Mentioned Feed", "", Category),
Category = ifelse(Category=="No Afi", "No Area for Improvement", Category),
Category = ifelse(Category=="Assessment Feedback", "Assessment and Feedback", Category),
Category = factor(Category, levels = c("Other", "Differentiation", "Student Comprehension", "Assessment and Feedback", "Student Engagement", "Communication", "Lesson Planning", "Classroom Management", "No Area for Improvement")))
# Create bar plot
ggplot(plot_data_combined, aes(x = reorder(Category, Mean), y = Mean, fill = Type)) +
geom_col(position = "dodge", width = 0.7) +
coord_flip() +
labs(x = NULL, y = "% of Feedback or PSTs", fill = NULL) +
theme_minimal(base_size = 14) +
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05), labels = scales::percent_format()) +
scale_fill_manual(values = c("Feedback-Level" = "#FF8C42", "PST-Level" = "#1F4E79")) +
theme(
text = element_text(family = "LMRoman", color = "black", size = 16),
plot.caption = element_text(hjust = 0),
axis.text = element_text(color = "black", size = 16),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom"
)
# Combine and reshape data for plotting
plot_data_combined <- bind_rows(
pivot_longer(overall_means,
cols = everything(),
names_to = "Category",
values_to = "Mean") %>%
mutate(Type = "Feedback Level"),
pivot_longer(pst_means,
cols = everything(),
names_to = "Category",
values_to = "Mean") %>%
mutate(Type = "PST Level")
) %>%
mutate(
Category = str_remove(Category, "^(overall_|pst_)"),
Category = str_replace_all(Category, "_", " ") %>% str_to_title()
) %>%
mutate(Category = gsub(" Mentioned Feed", "", Category),
Category = ifelse(Category=="No Afi", "No Area for Improvement", Category),
Category = ifelse(Category=="Assessment Feedback", "Assessment and Feedback", Category),
Category = factor(Category, levels = c("Other", "Differentiation", "Student Comprehension", "Assessment and Feedback", "Student Engagement", "Communication", "Lesson Planning", "Classroom Management", "No Area for Improvement")))
# Create bar plot
ggplot(plot_data_combined, aes(x = reorder(Category, Mean), y = Mean, fill = Type)) +
geom_col(position = "dodge", width = 0.7) +
coord_flip() +
labs(x = NULL, y = "% of Feedback or PSTs", fill = NULL) +
theme_minimal(base_size = 14) +
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05), labels = scales::percent_format()) +
scale_fill_manual(values = c("Feedback Level" = "#FF8C42", "PST Level" = "#1F4E79")) +
theme(
text = element_text(family = "LMRoman", color = "black", size = 16),
plot.caption = element_text(hjust = 0),
axis.text = element_text(color = "black", size = 16),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom"
)
ggsave(file.path(output_path, "AFI Bar Chart - AEFP.pdf"), width = 6, height = 4)
output_path
ggsave(file.path(output_path, "AFI Bar Chart - AEFP.pdf"), width = 6, height = 4)
plot_data_combined
View(plot_data_combined)
model1 <- feols(ever_enter_teaching ~ no_afi_mentioned_feed + classroom_management_mentioned_feed + lesson_planning_mentioned_feed + differentiation_mentioned_feed + assessment_feedback_mentioned_feed + student_engagement_mentioned_feed + student_comprehension_mentioned_feed + communication_mentioned_feed + other_mentioned_feed | sat_score_cat + gpa_z_cat + race + faminc + sex + mother_colldeg + father_colldeg + supervisor_id + programcohort + observation_order, data = analysis_data, cluster = "pst_id", weights = ~inv_n_obs)
model2 <- feols(enter_teaching_imm ~ no_afi_mentioned_feed + classroom_management_mentioned_feed + lesson_planning_mentioned_feed + differentiation_mentioned_feed + assessment_feedback_mentioned_feed + student_engagement_mentioned_feed + student_comprehension_mentioned_feed + communication_mentioned_feed + other_mentioned_feed | sat_score_cat + gpa_z_cat + race + faminc + sex + mother_colldeg + father_colldeg + supervisor_id + programcohort + observation_order, data = analysis_data, cluster = "pst_id", weights = ~inv_n_obs)
model3 <- feols(same_school ~ no_afi_mentioned_feed + classroom_management_mentioned_feed + lesson_planning_mentioned_feed + differentiation_mentioned_feed + assessment_feedback_mentioned_feed + student_engagement_mentioned_feed + student_comprehension_mentioned_feed + communication_mentioned_feed + other_mentioned_feed | sat_score_cat + gpa_z_cat + race + faminc + sex + mother_colldeg + father_colldeg + supervisor_id + programcohort + observation_order, data = analysis_data, cluster = "pst_id", weights = ~inv_n_obs)
model4 <- feols(advantage_index ~ no_afi_mentioned_feed + classroom_management_mentioned_feed + lesson_planning_mentioned_feed + differentiation_mentioned_feed + assessment_feedback_mentioned_feed + student_engagement_mentioned_feed + student_comprehension_mentioned_feed + communication_mentioned_feed + other_mentioned_feed | sat_score_cat + gpa_z_cat + race + sex + mother_colldeg + father_colldeg + supervisor_id + programcohort + observation_order, data = analysis_data, cluster = "pst_id", weights = ~inv_n_obs)
model5 <- feols(leave_teaching_years_1_to_4 ~ no_afi_mentioned_feed + classroom_management_mentioned_feed + lesson_planning_mentioned_feed + differentiation_mentioned_feed + assessment_feedback_mentioned_feed + student_engagement_mentioned_feed + student_comprehension_mentioned_feed + communication_mentioned_feed + other_mentioned_feed | sat_score_cat + gpa_z_cat + race + sex + mother_colldeg + father_colldeg + supervisor_id + programcohort + observation_order, data = analysis_data, cluster = "pst_id", weights = ~inv_n_obs)
# Create combined regression table
models <- list(model1,model2,model3,model4,model5)
etable(models)
table <- modelsummary(models = models,
estimate = "{estimate} ({std.error}){stars}",
statistic = NULL,
stars = c('*' = .05, '**' = .01, '***' = .001),
coef_map = cm,
gof_omit = 'DF|Deviance|AIC|BIC|RMSE|Std.Errors',
gof_map = gm_presentation) %>%
group_tt(i = list("\\textbf{Area for improvement}" = 1)) %>%
save_tt("latex")
table <- sub("(?s).*?\\\\midrule(.*?)\\\\bottomrule.*", "\\1", table, perl = TRUE) %>% replace_x_with_checkmark()
# Save to LaTeX
writeLines(table, file.path(output_path, "Pred_Labor_Market_Outcomes_AEFP.tex"))
#Plot reflection descriptions----
plot_data <- analysis_data %>%
mutate(feedback_score = rowMeans(across(c("no_afi_mentioned_feed", "classroom_management_mentioned_feed", "lesson_planning_mentioned_feed", "differentiation_mentioned_feed", "assessment_feedback_mentioned_feed", "student_engagement_mentioned_feed", "student_comprehension_mentioned_feed", "communication_mentioned_feed", "other_mentioned_feed")), na.rm = TRUE))
# Calculate overall means
overall_means <- plot_data %>%
summarize(across(c("no_afi_mentioned_feed", "classroom_management_mentioned_feed", "lesson_planning_mentioned_feed", "differentiation_mentioned_feed", "assessment_feedback_mentioned_feed", "student_engagement_mentioned_feed", "student_comprehension_mentioned_feed", "communication_mentioned_feed", "other_mentioned_feed"),
~mean(.x, na.rm = TRUE), .names = "overall_{.col}"))
# Calculate PST-level means (PSTs with at least one occurrence)
pst_means <- plot_data %>%
group_by(pst_id) %>%
summarize(across(c("no_afi_mentioned_feed", "classroom_management_mentioned_feed", "lesson_planning_mentioned_feed", "differentiation_mentioned_feed", "assessment_feedback_mentioned_feed", "student_engagement_mentioned_feed", "student_comprehension_mentioned_feed", "communication_mentioned_feed", "other_mentioned_feed"),
~as.numeric(any(.x == 1, na.rm = TRUE)))) %>%
summarize(across(-pst_id, ~mean(.x, na.rm = TRUE), .names = "pst_{.col}"))
# Combine and reshape data for plotting
plot_data_combined <- bind_rows(
pivot_longer(overall_means,
cols = everything(),
names_to = "Category",
values_to = "Mean") %>%
mutate(Type = "Feedback Level"),
pivot_longer(pst_means,
cols = everything(),
names_to = "Category",
values_to = "Mean") %>%
mutate(Type = "PST Level")
) %>%
mutate(
Category = str_remove(Category, "^(overall_|pst_)"),
Category = str_replace_all(Category, "_", " ") %>% str_to_title()
) %>%
mutate(Category = gsub(" Mentioned Feed", "", Category),
Category = ifelse(Category=="No Afi", "No Area for Improvement", Category),
Category = ifelse(Category=="Assessment Feedback", "Assessment and Feedback", Category),
Category = factor(Category, levels = c("Other", "Differentiation", "Student Comprehension", "Assessment and Feedback", "Student Engagement", "Communication", "Lesson Planning", "Classroom Management", "No Area for Improvement")))
# Create bar plot
ggplot(plot_data_combined, aes(x = reorder(Category, Mean), y = Mean, fill = Type)) +
geom_col(position = "dodge", width = 0.7) +
coord_flip() +
labs(x = NULL, y = "% of Feedback or PSTs", fill = NULL) +
theme_minimal(base_size = 14) +
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05), labels = scales::percent_format()) +
scale_fill_manual(values = c("Feedback Level" = "#FF8C42", "PST Level" = "#1F4E79")) +
theme(
text = element_text(family = "LMRoman", color = "black", size = 16),
plot.caption = element_text(hjust = 0),
axis.text = element_text(color = "black", size = 16),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom"
)
rm(plot_data_combined, overall_means, pst_means)
ggsave(file.path(output_path, "AFI Bar Chart - AEFP.pdf"), width = 6, height = 4)
#ReadMe----
#Purpose: Putting together analysis data
#Author: Andrew Avitabile
#General----
#Load packages
pacman::p_load(conflicted, here, tidyverse, openxlsx, lme4)
# Remove everything
rm(list=ls())
# Conflict prefer
conflict_prefer(name = "filter", winner = "dplyr")
#Import data----
# Publicly-available observation-level file
pst_data <- read.xlsx(here("raw data", "PST Data.xlsx")) %>% mutate(suspensions_instances = as.numeric(suspensions_instances))
# LLM-analyzed data
llm_coded_feedback <- read.csv(here("processed data", "2025.03.05 - Feedback Analysis.csv")) %>%
rename_with(~ if_else(.x == "observationid", .x, paste0(.x, "_feed"))) %>%
select(-text_feed) %>%
# Despite begging, need to reclassify some of the area_for_improvement categorizations (applies to very few)
mutate(area_for_improvement_feed = case_when(area_for_improvement_feed %in% c("Closure", "Closure Techniques") ~ "Lesson Planning",
area_for_improvement_feed %in% c("Questioning", "Questioning Strategies") ~ "Assessment and Feedback",
area_for_improvement_feed == "Time Management" ~ "Classroom Management",
area_for_improvement_feed == "Instructional Delivery" ~ "Communication",
area_for_improvement_feed %in% c("Curriculum Familiarity", "Content Knowledge") ~ "other",
TRUE ~ area_for_improvement_feed))
llm_coded_reflections <- read.csv(here("processed data", "2025.03.06 - Reflections Analysis.csv")) %>%
rename_with(~ if_else(.x == "observationid", .x, paste0(.x, "_ref"))) %>%
select(-text_ref) %>%
# Despite begging, need to reclassify some of the area_for_improvement categorizations (applies to very few)
mutate(area_for_improvement_ref = case_when(area_for_improvement_ref %in% c("Closure", "lesson_planning") ~ "Lesson Planning",
area_for_improvement_ref %in% c("Questioning", "Questioning Strategies") ~ "Assessment and Feedback",
area_for_improvement_ref %in% c("time management", "time_management", "classroom_management") ~ "Classroom Management",
area_for_improvement_ref %in% c("Curriculum Familiarity", "Content Knowledge") ~ "other",
TRUE ~ area_for_improvement_ref))
table(llm_coded_reflections$area_for_improvement_ref)
llm_coded_reflections <- read.csv(here("processed data", "2025.03.06 - Reflections Analysis.csv")) %>%
rename_with(~ if_else(.x == "observationid", .x, paste0(.x, "_ref"))) %>%
select(-text_ref) %>%
# Despite begging, need to reclassify some of the area_for_improvement categorizations (applies to very few)
mutate(area_for_improvement_ref = case_when(area_for_improvement_ref %in% c("Closure", "lesson_planning") ~ "Lesson Planning",
area_for_improvement_ref %in% c("Questioning", "Questioning Strategies") ~ "Assessment and Feedback",
area_for_improvement_ref %in% c("Time Management", "time management", "time_management", "classroom_management") ~ "Classroom Management",
area_for_improvement_ref %in% c("Organization", "Curriculum Familiarity", "Content Knowledge") ~ "other",
TRUE ~ area_for_improvement_ref))
table(llm_coded_reflections$area_for_improvement_ref)
#ReadMe----
#Purpose: Putting together analysis data
#Author: Andrew Avitabile
#General----
#Load packages
pacman::p_load(conflicted, here, tidyverse, openxlsx, lme4)
# Remove everything
rm(list=ls())
# Conflict prefer
conflict_prefer(name = "filter", winner = "dplyr")
#Import data----
# Publicly-available observation-level file
pst_data <- read.xlsx(here("raw data", "PST Data.xlsx")) %>% mutate(suspensions_instances = as.numeric(suspensions_instances))
# LLM-analyzed data
llm_coded_feedback <- read.csv(here("processed data", "2025.03.05 - Feedback Analysis.csv")) %>%
rename_with(~ if_else(.x == "observationid", .x, paste0(.x, "_feed"))) %>%
select(-text_feed) %>%
# Despite begging, need to reclassify some of the area_for_improvement categorizations (applies to very few)
mutate(area_for_improvement_feed = case_when(area_for_improvement_feed %in% c("Closure", "Closure Techniques") ~ "Lesson Planning",
area_for_improvement_feed %in% c("Questioning", "Questioning Strategies") ~ "Assessment and Feedback",
area_for_improvement_feed == "Time Management" ~ "Classroom Management",
area_for_improvement_feed == "Instructional Delivery" ~ "Communication",
area_for_improvement_feed %in% c("Curriculum Familiarity", "Content Knowledge") ~ "other",
TRUE ~ area_for_improvement_feed))
llm_coded_reflections <- read.csv(here("processed data", "2025.03.06 - Reflections Analysis.csv")) %>%
rename_with(~ if_else(.x == "observationid", .x, paste0(.x, "_ref"))) %>%
select(-text_ref) %>%
# Despite begging, need to reclassify some of the area_for_improvement categorizations (applies to very few)
mutate(area_for_improvement_ref = case_when(area_for_improvement_ref %in% c("Closure", "lesson_planning") ~ "Lesson Planning",
area_for_improvement_ref %in% c("Questioning", "Questioning Strategies") ~ "Assessment and Feedback",
area_for_improvement_ref %in% c("Time Management", "time management", "time_management", "classroom_management") ~ "Classroom Management",
area_for_improvement_ref %in% c("Organization", "Curriculum Familiarity", "Content Knowledge") ~ "other",
TRUE ~ area_for_improvement_ref))
#Preparing data----
table(pst_data$race)
analysis_data <- pst_data %>%
# Merge in LLM-analyzed data
left_join(llm_coded_feedback, by = "observationid") %>%
left_join(llm_coded_reflections, by = "observationid") %>%
# Clean variables
mutate(
programcohort = paste(certification, cohort),
# Change race to have other
race = case_when(race == "Black" ~ "Black",
race == "Hispanic" ~ "Hispanic",
race == "White, Non-Hispanic" ~ "White, Non-Hispanic",
race == "Asian or Pacific Islander" ~ "Asian or Pacific Islander",
race == "Missing" ~ "Missing",
TRUE ~ "Other"),
# Turn categorical variables into factors
certification = relevel(factor(certification), ref = "EC-6"),
sat_score_cat = relevel(factor(sat_score_cat), ref = "1000-1290"),
race = relevel(factor(race), ref = "White, Non-Hispanic"),
faminc = relevel(factor(faminc), ref = "$80k-150k"),
sex = relevel(factor(sex), ref = "Female"),
mother_colldeg = relevel(factor(mother_colldeg), ref = "Yes"),
father_colldeg = relevel(factor(father_colldeg), ref = "Yes"),
# Clean area for improvement variables
area_for_improvement_feed = factor(area_for_improvement_feed,
levels = c("none", "Classroom Management", "Lesson Planning", "Student Engagement", "Communication", "Assessment and Feedback", "Student Comprehension", "Differentiation", "multiple", "other"),
labels = c("None", "Classroom Management", "Lesson Planning", "Student Engagement", "Communication", "Assessment and Feedback", "Student Comprehension", "Differentiation", "Multiple Areas", "Other")),
area_for_improvement_feed = relevel(area_for_improvement_feed, ref = "None"), #Note that None is reference for the feedback, as it is most common
area_for_improvement_ref = factor(area_for_improvement_ref,
levels = c("none", "Classroom Management", "Lesson Planning", "Student Engagement", "Communication", "Assessment and Feedback", "Student Comprehension", "Differentiation", "multiple", "other"),
labels = c("None", "Classroom Management", "Lesson Planning", "Student Engagement", "Communication", "Assessment and Feedback", "Student Comprehension", "Differentiation", "Multiple Areas", "Other")),
area_for_improvement_ref = relevel(area_for_improvement_ref, ref = "Classroom Management"), #Note that Classroom Management is reference for the reflections, as it is most common
# Create binary area for improvement variables
afi_1_feed = ifelse(area_for_improvement_feed == "Classroom Management", 1, 0),
afi_2_feed = ifelse(area_for_improvement_feed == "Lesson Planning", 1, 0),
afi_3_feed = ifelse(area_for_improvement_feed == "Student Engagement", 1, 0),
afi_4_feed = ifelse(area_for_improvement_feed == "Communication", 1, 0),
afi_5_feed = ifelse(area_for_improvement_feed == "Assessment and Feedback", 1, 0),
afi_6_feed = ifelse(area_for_improvement_feed == "Student Comprehension", 1, 0),
afi_7_feed = ifelse(area_for_improvement_feed == "Differentiation", 1, 0),
afi_8_feed = ifelse(area_for_improvement_feed == "Other", 1, 0),
afi_9_feed = ifelse(area_for_improvement_feed == "Multiple Areas", 1, 0),
afi_10_feed = ifelse(area_for_improvement_feed == "None", 1, 0),
afi_1_ref = ifelse(area_for_improvement_ref == "Classroom Management", 1, 0),
afi_2_ref = ifelse(area_for_improvement_ref == "Lesson Planning", 1, 0),
afi_3_ref = ifelse(area_for_improvement_ref == "Student Engagement", 1, 0),
afi_4_ref = ifelse(area_for_improvement_ref == "Communication", 1, 0),
afi_5_ref = ifelse(area_for_improvement_ref == "Assessment and Feedback", 1, 0),
afi_6_ref = ifelse(area_for_improvement_ref == "Student Comprehension", 1, 0),
afi_7_ref = ifelse(area_for_improvement_ref == "Differentiation", 1, 0),
afi_8_ref = ifelse(area_for_improvement_ref == "Other", 1, 0),
afi_9_ref = ifelse(area_for_improvement_ref == "Multiple Areas", 1, 0),
afi_10_ref = ifelse(area_for_improvement_ref == "None", 1, 0),
# Number of sentences in feedback and reflections
n_sentences_feed = ifelse(str_trim(text_feedback) == ".", 0,
ifelse(str_detect(str_trim(text_feedback), "\\w+$") & !str_detect(str_trim(text_feedback), "[.!?\\r\\n]$"), 1,
str_count(text_feedback, "(?<!\\.)[.!?\\r\\n]+(?!\\.)") -
str_count(text_feedback, "\\b\\d+\\.$"))),
n_sentences_ref = ifelse(str_trim(text_reflection) == ".", 0,
ifelse(str_detect(str_trim(text_reflection), "\\w+$") & !str_detect(str_trim(text_reflection), "[.!?\\r\\n]$"), 1,
str_count(text_reflection, "(?<!\\.)[.!?\\r\\n]+(?!\\.)") -
str_count(text_reflection, "\\b\\d+\\.$"))),
# Add additional variables to be used in the analyses
inv_n_obs = 1/nobservations
) %>%
# No area for improvement flagged using binary indicators
mutate(no_afi_mentioned_feed = if_else(
rowSums(select(., classroom_management_mentioned_feed,
lesson_planning_mentioned_feed, differentiation_mentioned_feed,
assessment_feedback_mentioned_feed, student_engagement_mentioned_feed,
student_comprehension_mentioned_feed, communication_mentioned_feed,
other_mentioned_feed)) == 0, 1, 0),
no_afi_mentioned_ref = if_else(
rowSums(select(., classroom_management_mentioned_ref,
lesson_planning_mentioned_ref, differentiation_mentioned_ref,
assessment_refback_mentioned_ref, student_engagement_mentioned_ref,
student_comprehension_mentioned_ref, communication_mentioned_ref,
other_mentioned_ref)) == 0, 1, 0))
#ReadMe----
#Purpose: Putting together analysis data
#Author: Andrew Avitabile
#General----
#Load packages
pacman::p_load(conflicted, here, tidyverse, openxlsx, lme4)
# Remove everything
rm(list=ls())
# Conflict prefer
conflict_prefer(name = "filter", winner = "dplyr")
#Import data----
# Publicly-available observation-level file
pst_data <- read.xlsx(here("raw data", "PST Data.xlsx")) %>% mutate(suspensions_instances = as.numeric(suspensions_instances))
# LLM-analyzed data
llm_coded_feedback <- read.csv(here("processed data", "2025.03.05 - Feedback Analysis.csv")) %>%
rename_with(~ if_else(.x == "observationid", .x, paste0(.x, "_feed"))) %>%
select(-text_feed) %>%
# Despite begging, need to reclassify some of the area_for_improvement categorizations (applies to very few)
mutate(area_for_improvement_feed = case_when(area_for_improvement_feed %in% c("Closure", "Closure Techniques") ~ "Lesson Planning",
area_for_improvement_feed %in% c("Questioning", "Questioning Strategies") ~ "Assessment and Feedback",
area_for_improvement_feed == "Time Management" ~ "Classroom Management",
area_for_improvement_feed == "Instructional Delivery" ~ "Communication",
area_for_improvement_feed %in% c("Curriculum Familiarity", "Content Knowledge") ~ "other",
TRUE ~ area_for_improvement_feed))
llm_coded_reflections <- read.csv(here("processed data", "2025.03.06 - Reflections Analysis.csv")) %>%
rename_with(~ if_else(.x == "observationid", .x, paste0(.x, "_ref"))) %>%
select(-text_ref) %>%
# Despite begging, need to reclassify some of the area_for_improvement categorizations (applies to very few)
mutate(area_for_improvement_ref = case_when(area_for_improvement_ref %in% c("Closure", "lesson_planning") ~ "Lesson Planning",
area_for_improvement_ref %in% c("Questioning", "Questioning Strategies") ~ "Assessment and Feedback",
area_for_improvement_ref %in% c("Time Management", "time management", "time_management", "classroom_management") ~ "Classroom Management",
area_for_improvement_ref %in% c("Organization", "Curriculum Familiarity", "Content Knowledge") ~ "other",
TRUE ~ area_for_improvement_ref))
#Preparing data----
table(pst_data$race)
analysis_data <- pst_data %>%
# Merge in LLM-analyzed data
left_join(llm_coded_feedback, by = "observationid") %>%
left_join(llm_coded_reflections, by = "observationid") %>%
# Clean variables
mutate(
programcohort = paste(certification, cohort),
# Change race to have other
race = case_when(race == "Black" ~ "Black",
race == "Hispanic" ~ "Hispanic",
race == "White, Non-Hispanic" ~ "White, Non-Hispanic",
race == "Asian or Pacific Islander" ~ "Asian or Pacific Islander",
race == "Missing" ~ "Missing",
TRUE ~ "Other"),
# Turn categorical variables into factors
certification = relevel(factor(certification), ref = "EC-6"),
sat_score_cat = relevel(factor(sat_score_cat), ref = "1000-1290"),
race = relevel(factor(race), ref = "White, Non-Hispanic"),
faminc = relevel(factor(faminc), ref = "$80k-150k"),
sex = relevel(factor(sex), ref = "Female"),
mother_colldeg = relevel(factor(mother_colldeg), ref = "Yes"),
father_colldeg = relevel(factor(father_colldeg), ref = "Yes"),
# Clean area for improvement variables
area_for_improvement_feed = factor(area_for_improvement_feed,
levels = c("none", "Classroom Management", "Lesson Planning", "Student Engagement", "Communication", "Assessment and Feedback", "Student Comprehension", "Differentiation", "multiple", "other"),
labels = c("None", "Classroom Management", "Lesson Planning", "Student Engagement", "Communication", "Assessment and Feedback", "Student Comprehension", "Differentiation", "Multiple Areas", "Other")),
area_for_improvement_feed = relevel(area_for_improvement_feed, ref = "None"), #Note that None is reference for the feedback, as it is most common
area_for_improvement_ref = factor(area_for_improvement_ref,
levels = c("none", "Classroom Management", "Lesson Planning", "Student Engagement", "Communication", "Assessment and Feedback", "Student Comprehension", "Differentiation", "multiple", "other"),
labels = c("None", "Classroom Management", "Lesson Planning", "Student Engagement", "Communication", "Assessment and Feedback", "Student Comprehension", "Differentiation", "Multiple Areas", "Other")),
area_for_improvement_ref = relevel(area_for_improvement_ref, ref = "Classroom Management"), #Note that Classroom Management is reference for the reflections, as it is most common
# Create binary area for improvement variables
afi_1_feed = ifelse(area_for_improvement_feed == "Classroom Management", 1, 0),
afi_2_feed = ifelse(area_for_improvement_feed == "Lesson Planning", 1, 0),
afi_3_feed = ifelse(area_for_improvement_feed == "Student Engagement", 1, 0),
afi_4_feed = ifelse(area_for_improvement_feed == "Communication", 1, 0),
afi_5_feed = ifelse(area_for_improvement_feed == "Assessment and Feedback", 1, 0),
afi_6_feed = ifelse(area_for_improvement_feed == "Student Comprehension", 1, 0),
afi_7_feed = ifelse(area_for_improvement_feed == "Differentiation", 1, 0),
afi_8_feed = ifelse(area_for_improvement_feed == "Other", 1, 0),
afi_9_feed = ifelse(area_for_improvement_feed == "Multiple Areas", 1, 0),
afi_10_feed = ifelse(area_for_improvement_feed == "None", 1, 0),
afi_1_ref = ifelse(area_for_improvement_ref == "Classroom Management", 1, 0),
afi_2_ref = ifelse(area_for_improvement_ref == "Lesson Planning", 1, 0),
afi_3_ref = ifelse(area_for_improvement_ref == "Student Engagement", 1, 0),
afi_4_ref = ifelse(area_for_improvement_ref == "Communication", 1, 0),
afi_5_ref = ifelse(area_for_improvement_ref == "Assessment and Feedback", 1, 0),
afi_6_ref = ifelse(area_for_improvement_ref == "Student Comprehension", 1, 0),
afi_7_ref = ifelse(area_for_improvement_ref == "Differentiation", 1, 0),
afi_8_ref = ifelse(area_for_improvement_ref == "Other", 1, 0),
afi_9_ref = ifelse(area_for_improvement_ref == "Multiple Areas", 1, 0),
afi_10_ref = ifelse(area_for_improvement_ref == "None", 1, 0),
# Number of sentences in feedback and reflections
n_sentences_feed = ifelse(str_trim(text_feedback) == ".", 0,
ifelse(str_detect(str_trim(text_feedback), "\\w+$") & !str_detect(str_trim(text_feedback), "[.!?\\r\\n]$"), 1,
str_count(text_feedback, "(?<!\\.)[.!?\\r\\n]+(?!\\.)") -
str_count(text_feedback, "\\b\\d+\\.$"))),
n_sentences_ref = ifelse(str_trim(text_reflection) == ".", 0,
ifelse(str_detect(str_trim(text_reflection), "\\w+$") & !str_detect(str_trim(text_reflection), "[.!?\\r\\n]$"), 1,
str_count(text_reflection, "(?<!\\.)[.!?\\r\\n]+(?!\\.)") -
str_count(text_reflection, "\\b\\d+\\.$"))),
# Add additional variables to be used in the analyses
inv_n_obs = 1/nobservations
) %>%
# No area for improvement flagged using binary indicators
mutate(no_afi_mentioned_feed = if_else(
rowSums(select(., classroom_management_mentioned_feed,
lesson_planning_mentioned_feed, differentiation_mentioned_feed,
assessment_feedback_mentioned_feed, student_engagement_mentioned_feed,
student_comprehension_mentioned_feed, communication_mentioned_feed,
other_mentioned_feed)) == 0, 1, 0),
no_afi_mentioned_ref = if_else(
rowSums(select(., classroom_management_mentioned_ref,
lesson_planning_mentioned_ref, differentiation_mentioned_ref,
assessment_feedback_mentioned_ref, student_engagement_mentioned_ref,
student_comprehension_mentioned_ref, communication_mentioned_ref,
other_mentioned_ref)) == 0, 1, 0))
# Estimate models predicting average evaluation score with random intercepts for supervisor, PST, and clinical teaching school
model <- lmer(avg_eval_score_std ~ factor(observation_order) + (1 | supervisor_id) + (1 | pst_id) + (1 | st_school_id), data = analysis_data)
# Get BLUPs from models
## These random effects coefficients represent the variance in standardized evaluation scores explained by supervisors, PSTs, and placement schools. The estimates are "shrunk" towards zero to adjust for sample size, similar to teacher value-added estimates.
sup_blup_rate <- ranef(model)$supervisor_id %>% rename(supervisor_blup=`(Intercept)`) %>% rownames_to_column(var = "supervisor_id") %>% mutate(supervisor_id=as.numeric(supervisor_id))
pst_blup_rate <- ranef(model)$pst_id %>% rename(pst_blup=`(Intercept)`) %>% rownames_to_column(var = "pst_id") %>% mutate(pst_id=as.numeric(pst_id))
sch_blup_rate <- ranef(model)$st_school_id %>% rename(sch_blup=`(Intercept)`) %>% rownames_to_column(var = "st_school_id") %>% mutate(st_school_id=as.numeric(st_school_id))
# Get model-derived sd's and standardize BLUPs
sd_sup <- as_tibble(VarCorr(model)) %>% filter(grp == "supervisor_id") %>% select(sdcor) %>% as.numeric
sd_pst <- as_tibble(VarCorr(model)) %>% filter(grp == "pst_id") %>% select(sdcor) %>% as.numeric
sd_sch <- as_tibble(VarCorr(model)) %>% filter(grp == "st_school_id") %>% select(sdcor) %>% as.numeric
# Standardize BLUPs to mean 0 SD 1 using model-derived standard deviations
sup_blup_std <- mutate(sup_blup_rate, sup_blup_std = (supervisor_blup-mean(supervisor_blup))/sd_sup) %>% select(supervisor_id, sup_blup_std)
pst_blup_std <- mutate(pst_blup_rate, pst_blup_std = (pst_blup-mean(pst_blup))/sd_pst) %>% select(pst_id, pst_blup_std)
sch_blup_std <- mutate(sch_blup_rate, sch_blup_std = (sch_blup-mean(sch_blup))/sd_sch) %>% select(st_school_id, sch_blup_std)
# Add BLUPs to analysis data
analysis_data <- analysis_data %>%
left_join(sup_blup_std, by = "supervisor_id") %>%
left_join(pst_blup_std, by = "pst_id") %>%
left_join(sch_blup_std, by = "st_school_id")
#Save analysis data----
saveRDS(analysis_data, here("processed data", "analysis_data.RDS"))
